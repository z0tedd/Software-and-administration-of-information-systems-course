!function(t,e){"use strict";"undefined"!=typeof module&&module.exports?module.exports=e(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],e):e(t.jQuery)}(this,function(a){"use strict";function o(t,e){this.$element=a(t),this.options=a.extend({},a.fn.typeahead.defaults,e),this.matcher=this.options.matcher||this.matcher,this.sorter=this.options.sorter||this.sorter,this.select=this.options.select||this.select,this.autoSelect="boolean"!=typeof this.options.autoSelect||this.options.autoSelect,this.highlighter=this.options.highlighter||this.highlighter,this.render=this.options.render||this.render,this.updater=this.options.updater||this.updater,this.displayText=this.options.displayText||this.displayText,this.source=this.options.source,this.delay=this.options.delay,this.$menu=a(this.options.menu),this.$appendTo=this.options.appendTo?a(this.options.appendTo):null,this.shown=!1,this.listen(),this.showHintOnFocus="boolean"==typeof this.options.showHintOnFocus&&this.options.showHintOnFocus,this.afterSelect=this.options.afterSelect,this.addItem=!1}o.prototype={constructor:o,select:function(){var t=this.$menu.find(".active").data("value");return this.$element.data("active",t),(this.autoSelect||t)&&(t=this.updater(t),this.$element.val(this.displayText(t=t||"")||t).change(),this.afterSelect(t)),this.hide()},updater:function(t){return t},setSource:function(t){this.source=t},show:function(){var t=a.extend({},this.$element.position(),{height:this.$element[0].offsetHeight}),e="function"==typeof this.options.scrollHeight?this.options.scrollHeight.call():this.options.scrollHeight,s=this.shown?this.$menu:this.$appendTo?this.$menu.appendTo(this.$appendTo):this.$menu.insertAfter(this.$element);return s.css({top:t.top+t.height+e,left:t.left}).show(),this.shown=!0,this},hide:function(){return this.$menu.hide(),this.shown=!1,this},lookup:function(t){if(this.query=null!=t?t:this.$element.val()||"",this.query.length<this.options.minLength&&!this.options.showHintOnFocus)return this.shown?this.hide():this;t=a.proxy(function(){a.isFunction(this.source)?this.source(this.query,a.proxy(this.process,this)):this.source&&this.process(this.source)},this);clearTimeout(this.lookupWorker),this.lookupWorker=setTimeout(t,this.delay)},process:function(t){var e=this;return t=a.grep(t,function(t){return e.matcher(t)}),(t=this.sorter(t)).length||this.options.addItem?(0<t.length?this.$element.data("active",t[0]):this.$element.data("active",null),this.options.addItem&&t.push(this.options.addItem),("all"==this.options.items?this.render(t):this.render(t.slice(0,this.options.items))).show()):this.shown?this.hide():this},matcher:function(t){return~this.displayText(t).toLowerCase().indexOf(this.query.toLowerCase())},sorter:function(t){for(var e,s=[],i=[],o=[];e=t.shift();){var n=this.displayText(e);(n.toLowerCase().indexOf(this.query.toLowerCase())?~n.indexOf(this.query)?i:o:s).push(e)}return s.concat(i,o)},highlighter:function(t){var e,s,i,o=a("<div></div>"),n=this.query,h=t.toLowerCase().indexOf(n.toLowerCase()),r=n.length;if(0===r)return o.text(t).html();for(;-1<h;)e=t.substr(0,h),i=t.substr(h,r),s=t.substr(h+r),i=a("<strong></strong>").text(i),o.append(document.createTextNode(e)).append(i),h=(t=s).toLowerCase().indexOf(n.toLowerCase());return o.append(document.createTextNode(t)).html()},render:function(s){var i=this,o=this,n=!1,h=[],r=i.options.separator;return a.each(s,function(t,e){0<t&&e[r]!==s[t-1][r]&&h.push({__type:"divider"}),!e[r]||0!==t&&e[r]===s[t-1][r]||h.push({__type:"category",name:e[r]}),h.push(e)}),s=a(h).map(function(t,e){if("category"==(e.__type||!1))return a(i.options.headerHtml).text(e.name)[0];if("divider"==(e.__type||!1))return a(i.options.headerDivider)[0];var s=o.displayText(e);return(t=a(i.options.item).data("value",e)).find("a").html(i.highlighter(s,e)),s==o.$element.val()&&(t.addClass("active"),o.$element.data("active",e),n=!0),t[0]}),this.autoSelect&&!n&&(s.filter(":not(.dropdown-header)").first().addClass("active"),this.$element.data("active",s.first().data("value"))),this.$menu.html(s),this},displayText:function(t){return void 0!==t&&void 0!==t.name&&t.name||t},next:function(t){var e=this.$menu.find(".active").removeClass("active").next();(e=!e.length?a(this.$menu.find("li")[0]):e).addClass("active")},prev:function(t){var e=this.$menu.find(".active").removeClass("active").prev();(e=!e.length?this.$menu.find("li").last():e).addClass("active")},listen:function(){this.$element.on("focus",a.proxy(this.focus,this)).on("blur",a.proxy(this.blur,this)).on("keypress",a.proxy(this.keypress,this)).on("input",a.proxy(this.input,this)).on("keyup",a.proxy(this.keyup,this)),this.eventSupported("keydown")&&this.$element.on("keydown",a.proxy(this.keydown,this)),this.$menu.on("click",a.proxy(this.click,this)).on("mouseenter","li",a.proxy(this.mouseenter,this)).on("mouseleave","li",a.proxy(this.mouseleave,this))},destroy:function(){this.$element.data("typeahead",null),this.$element.data("active",null),this.$element.off("focus").off("blur").off("keypress").off("input").off("keyup"),this.eventSupported("keydown")&&this.$element.off("keydown"),this.$menu.remove()},eventSupported:function(t){var e=t in this.$element;return e||(this.$element.setAttribute(t,"return;"),e="function"==typeof this.$element[t]),e},move:function(t){if(this.shown)switch(t.keyCode){case 9:case 13:case 27:t.preventDefault();break;case 38:if(t.shiftKey)return;t.preventDefault(),this.prev();break;case 40:if(t.shiftKey)return;t.preventDefault(),this.next()}},keydown:function(t){this.suppressKeyPressRepeat=~a.inArray(t.keyCode,[40,38,9,13,27]),this.shown||40!=t.keyCode?this.move(t):this.lookup()},keypress:function(t){this.suppressKeyPressRepeat||this.move(t)},input:function(t){this.lookup(),t.preventDefault()},keyup:function(t){switch(t.keyCode){case 40:case 38:case 16:case 17:case 18:break;case 9:case 13:if(!this.shown)return;this.select();break;case 27:if(!this.shown)return;this.hide()}t.preventDefault()},focus:function(t){this.focused||(this.focused=!0,this.options.showHintOnFocus&&this.lookup())},blur:function(t){this.focused=!1,!this.mousedover&&this.shown&&this.hide()},click:function(t){t.preventDefault(),this.select(),this.$element.focus(),this.hide()},mouseenter:function(t){this.mousedover=!0,this.$menu.find(".active").removeClass("active"),a(t.currentTarget).addClass("active")},mouseleave:function(t){this.mousedover=!1,!this.focused&&this.shown&&this.hide()}};var t=a.fn.typeahead;a.fn.typeahead=function(s){var i=arguments;return"string"==typeof s&&"getActive"==s?this.data("active"):this.each(function(){var t=a(this),e=t.data("typeahead");e||t.data("typeahead",e=new o(this,"object"==typeof s&&s)),"string"==typeof s&&e[s]&&(1<i.length?e[s].apply(e,Array.prototype.slice.call(i,1)):e[s]())})},a.fn.typeahead.defaults={source:[],items:8,menu:'<ul class="typeahead dropdown-menu" role="listbox"></ul>',item:'<li><a class="dropdown-item" href="#" role="option"></a></li>',minLength:1,scrollHeight:0,autoSelect:!0,afterSelect:a.noop,addItem:!1,delay:0,separator:"category",headerHtml:'<li class="dropdown-header"></li>',headerDivider:'<li class="divider" role="separator"></li>'},a.fn.typeahead.Constructor=o,a.fn.typeahead.noConflict=function(){return a.fn.typeahead=t,this},a(document).on("focus.typeahead.data-api",'[data-provide="typeahead"]',function(t){var e=a(this);e.data("typeahead")||e.typeahead(e.data())})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
