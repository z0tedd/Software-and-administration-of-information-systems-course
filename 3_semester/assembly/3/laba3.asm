data segment          ; начало сегмента данных
    a db  15          ; переменная 'a' со значением 15
    b db  9           ; переменная 'b' со значением 9
    nod db 0          ; переменная для хранения результата НОД (изначально 0)
data ends             ; конец сегмента данных

code segment          ; начало сегмента кода
    begin:            ; метка начала программы

    ; Начало алгоритма Евклида для нахождения НОД
    mov ax, data      ; загружаем сегмент данных в регистр AX
    mov ds, ax        ; загружаем содержимое AX в регистр DS (указатель на сегмент данных)

    mov al, a         ; загружаем значение переменной 'a' в регистр AL
    mov bl, b         ; загружаем значение переменной 'b' в регистр BL

while_loop:           ; начало цикла для алгоритма Евклида
    cmp al, bl        ; сравниваем AL (a) и BL (b)
    je end_loop       ; если AL равен BL, переходим к метке end_loop (НОД найден)

    jl smaller        ; если AL < BL, переходим к метке smaller
    jg bigger         ; если AL > BL, переходим к метке bigger

smaller:
    sub bl, al        ; вычитаем AL из BL (b = b - a)
    jmp while_loop    ; возвращаемся в начало цикла while_loop

bigger:
    sub al, bl        ; вычитаем BL из AL (a = a - b)
    jmp while_loop    ; возвращаемся в начало цикла while_loop

end_loop:             ; конец цикла (когда найден НОД)
    mov nod, al       ; записываем результат НОД в переменную nod

    ; Подсчет количества единиц в двоичном представлении НОД
    mov cl, 8         ; устанавливаем счетчик битов на 8
    xor dl, dl        ; обнуляем регистр DL для подсчета количества единиц

count_one:            ; начало цикла для подсчета единиц
    shr nod, 1        ; сдвигаем биты переменной nod вправо на 1 (самый правый бит перемещается в флаг переноса)
    adc dl, 0         ; добавляем перенос к DL (если был перенос, DL увеличится на 1)
    loop count_one    ; уменьшаем CL и переходим к count_one, пока CL > 0

    ; Завершение программы
    mov ah, 4ch       ; код прерывания для завершения программы
    int 21h           ; вызываем прерывание 21h для завершения программы

code ends             ; конец сегмента кода
end begin             ; конец программы
